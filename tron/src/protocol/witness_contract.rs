// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `core/contract/witness_contract.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.WitnessCreateContract)
pub struct WitnessCreateContract {
    // message fields
    // @@protoc_insertion_point(field:protocol.WitnessCreateContract.owner_address)
    pub owner_address: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protocol.WitnessCreateContract.url)
    pub url: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.WitnessCreateContract.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WitnessCreateContract {
    fn default() -> &'a WitnessCreateContract {
        <WitnessCreateContract as ::protobuf::Message>::default_instance()
    }
}

impl WitnessCreateContract {
    pub fn new() -> WitnessCreateContract {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "owner_address",
            |m: &WitnessCreateContract| { &m.owner_address },
            |m: &mut WitnessCreateContract| { &mut m.owner_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "url",
            |m: &WitnessCreateContract| { &m.url },
            |m: &mut WitnessCreateContract| { &mut m.url },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WitnessCreateContract>(
            "WitnessCreateContract",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WitnessCreateContract {
    const NAME: &'static str = "WitnessCreateContract";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.owner_address = is.read_bytes()?;
                },
                18 => {
                    self.url = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.owner_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.owner_address);
        }
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.owner_address.is_empty() {
            os.write_bytes(1, &self.owner_address)?;
        }
        if !self.url.is_empty() {
            os.write_bytes(2, &self.url)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WitnessCreateContract {
        WitnessCreateContract::new()
    }

    fn clear(&mut self) {
        self.owner_address.clear();
        self.url.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WitnessCreateContract {
        static instance: WitnessCreateContract = WitnessCreateContract {
            owner_address: ::std::vec::Vec::new(),
            url: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WitnessCreateContract {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WitnessCreateContract").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WitnessCreateContract {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WitnessCreateContract {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.WitnessUpdateContract)
pub struct WitnessUpdateContract {
    // message fields
    // @@protoc_insertion_point(field:protocol.WitnessUpdateContract.owner_address)
    pub owner_address: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protocol.WitnessUpdateContract.update_url)
    pub update_url: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.WitnessUpdateContract.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WitnessUpdateContract {
    fn default() -> &'a WitnessUpdateContract {
        <WitnessUpdateContract as ::protobuf::Message>::default_instance()
    }
}

impl WitnessUpdateContract {
    pub fn new() -> WitnessUpdateContract {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "owner_address",
            |m: &WitnessUpdateContract| { &m.owner_address },
            |m: &mut WitnessUpdateContract| { &mut m.owner_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "update_url",
            |m: &WitnessUpdateContract| { &m.update_url },
            |m: &mut WitnessUpdateContract| { &mut m.update_url },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WitnessUpdateContract>(
            "WitnessUpdateContract",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WitnessUpdateContract {
    const NAME: &'static str = "WitnessUpdateContract";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.owner_address = is.read_bytes()?;
                },
                98 => {
                    self.update_url = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.owner_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.owner_address);
        }
        if !self.update_url.is_empty() {
            my_size += ::protobuf::rt::bytes_size(12, &self.update_url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.owner_address.is_empty() {
            os.write_bytes(1, &self.owner_address)?;
        }
        if !self.update_url.is_empty() {
            os.write_bytes(12, &self.update_url)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WitnessUpdateContract {
        WitnessUpdateContract::new()
    }

    fn clear(&mut self) {
        self.owner_address.clear();
        self.update_url.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WitnessUpdateContract {
        static instance: WitnessUpdateContract = WitnessUpdateContract {
            owner_address: ::std::vec::Vec::new(),
            update_url: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WitnessUpdateContract {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WitnessUpdateContract").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WitnessUpdateContract {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WitnessUpdateContract {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.VoteWitnessContract)
pub struct VoteWitnessContract {
    // message fields
    // @@protoc_insertion_point(field:protocol.VoteWitnessContract.owner_address)
    pub owner_address: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protocol.VoteWitnessContract.votes)
    pub votes: ::std::vec::Vec<vote_witness_contract::Vote>,
    // @@protoc_insertion_point(field:protocol.VoteWitnessContract.support)
    pub support: bool,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.VoteWitnessContract.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VoteWitnessContract {
    fn default() -> &'a VoteWitnessContract {
        <VoteWitnessContract as ::protobuf::Message>::default_instance()
    }
}

impl VoteWitnessContract {
    pub fn new() -> VoteWitnessContract {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "owner_address",
            |m: &VoteWitnessContract| { &m.owner_address },
            |m: &mut VoteWitnessContract| { &mut m.owner_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "votes",
            |m: &VoteWitnessContract| { &m.votes },
            |m: &mut VoteWitnessContract| { &mut m.votes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "support",
            |m: &VoteWitnessContract| { &m.support },
            |m: &mut VoteWitnessContract| { &mut m.support },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VoteWitnessContract>(
            "VoteWitnessContract",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VoteWitnessContract {
    const NAME: &'static str = "VoteWitnessContract";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.owner_address = is.read_bytes()?;
                },
                18 => {
                    self.votes.push(is.read_message()?);
                },
                24 => {
                    self.support = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.owner_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.owner_address);
        }
        for value in &self.votes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.support != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.owner_address.is_empty() {
            os.write_bytes(1, &self.owner_address)?;
        }
        for v in &self.votes {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.support != false {
            os.write_bool(3, self.support)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VoteWitnessContract {
        VoteWitnessContract::new()
    }

    fn clear(&mut self) {
        self.owner_address.clear();
        self.votes.clear();
        self.support = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VoteWitnessContract {
        static instance: VoteWitnessContract = VoteWitnessContract {
            owner_address: ::std::vec::Vec::new(),
            votes: ::std::vec::Vec::new(),
            support: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for VoteWitnessContract {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VoteWitnessContract").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VoteWitnessContract {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VoteWitnessContract {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `VoteWitnessContract`
pub mod vote_witness_contract {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:protocol.VoteWitnessContract.Vote)
    pub struct Vote {
        // message fields
        // @@protoc_insertion_point(field:protocol.VoteWitnessContract.Vote.vote_address)
        pub vote_address: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:protocol.VoteWitnessContract.Vote.vote_count)
        pub vote_count: i64,
        // special fields
        // @@protoc_insertion_point(special_field:protocol.VoteWitnessContract.Vote.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Vote {
        fn default() -> &'a Vote {
            <Vote as ::protobuf::Message>::default_instance()
        }
    }

    impl Vote {
        pub fn new() -> Vote {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "vote_address",
                |m: &Vote| { &m.vote_address },
                |m: &mut Vote| { &mut m.vote_address },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "vote_count",
                |m: &Vote| { &m.vote_count },
                |m: &mut Vote| { &mut m.vote_count },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Vote>(
                "VoteWitnessContract.Vote",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Vote {
        const NAME: &'static str = "Vote";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.vote_address = is.read_bytes()?;
                    },
                    16 => {
                        self.vote_count = is.read_int64()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.vote_address.is_empty() {
                my_size += ::protobuf::rt::bytes_size(1, &self.vote_address);
            }
            if self.vote_count != 0 {
                my_size += ::protobuf::rt::int64_size(2, self.vote_count);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.vote_address.is_empty() {
                os.write_bytes(1, &self.vote_address)?;
            }
            if self.vote_count != 0 {
                os.write_int64(2, self.vote_count)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Vote {
            Vote::new()
        }

        fn clear(&mut self) {
            self.vote_address.clear();
            self.vote_count = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Vote {
            static instance: Vote = Vote {
                vote_address: ::std::vec::Vec::new(),
                vote_count: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Vote {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("VoteWitnessContract.Vote").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Vote {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Vote {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$core/contract/witness_contract.proto\x12\x08protocol\"N\n\x15WitnessC\
    reateContract\x12#\n\rowner_address\x18\x01\x20\x01(\x0cR\x0cownerAddres\
    s\x12\x10\n\x03url\x18\x02\x20\x01(\x0cR\x03url\"[\n\x15WitnessUpdateCon\
    tract\x12#\n\rowner_address\x18\x01\x20\x01(\x0cR\x0cownerAddress\x12\
    \x1d\n\nupdate_url\x18\x0c\x20\x01(\x0cR\tupdateUrl\"\xd8\x01\n\x13VoteW\
    itnessContract\x12#\n\rowner_address\x18\x01\x20\x01(\x0cR\x0cownerAddre\
    ss\x128\n\x05votes\x18\x02\x20\x03(\x0b2\".protocol.VoteWitnessContract.\
    VoteR\x05votes\x12\x18\n\x07support\x18\x03\x20\x01(\x08R\x07support\x1a\
    H\n\x04Vote\x12!\n\x0cvote_address\x18\x01\x20\x01(\x0cR\x0bvoteAddress\
    \x12\x1d\n\nvote_count\x18\x02\x20\x01(\x03R\tvoteCountBE\n\x18org.tron.\
    protos.contractZ)github.com/tronprotocol/grpc-gateway/coreJ\xe3\x06\n\
    \x06\x12\x04\0\0\x1a\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x02\0\x11\n\x08\n\x01\x08\x12\x03\x04\01\nH\n\x02\x08\x01\x12\
    \x03\x04\01\"=Specify\x20the\x20name\x20of\x20the\x20package\x20that\x20\
    generated\x20the\x20Java\x20file\n\n\x08\n\x01\x08\x12\x03\x06\0@\nv\n\
    \x02\x08\x0b\x12\x03\x06\0@\x1akoption\x20java_outer_classname\x20=\x20\
    \"WitnessCreateContract\";\x20//Specify\x20the\x20class\x20name\x20of\
    \x20the\x20generated\x20Java\x20file\n\n\n\n\x02\x04\0\x12\x04\x08\0\x0b\
    \x01\n\n\n\x03\x04\0\x01\x12\x03\x08\x08\x1d\n\x0b\n\x04\x04\0\x02\0\x12\
    \x03\t\x02\x1a\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\t\x02\x07\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\t\x08\x15\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\t\
    \x18\x19\n\x0b\n\x04\x04\0\x02\x01\x12\x03\n\x02\x10\n\x0c\n\x05\x04\0\
    \x02\x01\x05\x12\x03\n\x02\x07\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\n\
    \x08\x0b\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\n\x0e\x0f\n\n\n\x02\x04\
    \x01\x12\x04\r\0\x10\x01\n\n\n\x03\x04\x01\x01\x12\x03\r\x08\x1d\n\x0b\n\
    \x04\x04\x01\x02\0\x12\x03\x0e\x02\x1a\n\x0c\n\x05\x04\x01\x02\0\x05\x12\
    \x03\x0e\x02\x07\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0e\x08\x15\n\x0c\
    \n\x05\x04\x01\x02\0\x03\x12\x03\x0e\x18\x19\n\x0b\n\x04\x04\x01\x02\x01\
    \x12\x03\x0f\x02\x18\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0f\x02\x07\
    \n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0f\x08\x12\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03\x0f\x15\x17\n\n\n\x02\x04\x02\x12\x04\x12\0\x1a\x01\
    \n\n\n\x03\x04\x02\x01\x12\x03\x12\x08\x1b\n\x0c\n\x04\x04\x02\x03\0\x12\
    \x04\x13\x02\x16\x03\n\x0c\n\x05\x04\x02\x03\0\x01\x12\x03\x13\n\x0e\n\r\
    \n\x06\x04\x02\x03\0\x02\0\x12\x03\x14\x04\x1b\n\x0e\n\x07\x04\x02\x03\0\
    \x02\0\x05\x12\x03\x14\x04\t\n\x0e\n\x07\x04\x02\x03\0\x02\0\x01\x12\x03\
    \x14\n\x16\n\x0e\n\x07\x04\x02\x03\0\x02\0\x03\x12\x03\x14\x19\x1a\n\r\n\
    \x06\x04\x02\x03\0\x02\x01\x12\x03\x15\x04\x19\n\x0e\n\x07\x04\x02\x03\0\
    \x02\x01\x05\x12\x03\x15\x04\t\n\x0e\n\x07\x04\x02\x03\0\x02\x01\x01\x12\
    \x03\x15\n\x14\n\x0e\n\x07\x04\x02\x03\0\x02\x01\x03\x12\x03\x15\x17\x18\
    \n\x0b\n\x04\x04\x02\x02\0\x12\x03\x17\x02\x1a\n\x0c\n\x05\x04\x02\x02\0\
    \x05\x12\x03\x17\x02\x07\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x17\x08\
    \x15\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x17\x18\x19\n\x0b\n\x04\x04\
    \x02\x02\x01\x12\x03\x18\x02\x1a\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\
    \x18\x02\n\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03\x18\x0b\x0f\n\x0c\n\
    \x05\x04\x02\x02\x01\x01\x12\x03\x18\x10\x15\n\x0c\n\x05\x04\x02\x02\x01\
    \x03\x12\x03\x18\x18\x19\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x19\x02\x13\
    \n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x19\x02\x06\n\x0c\n\x05\x04\x02\
    \x02\x02\x01\x12\x03\x19\x07\x0e\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\
    \x19\x11\x12b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(WitnessCreateContract::generated_message_descriptor_data());
            messages.push(WitnessUpdateContract::generated_message_descriptor_data());
            messages.push(VoteWitnessContract::generated_message_descriptor_data());
            messages.push(vote_witness_contract::Vote::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
