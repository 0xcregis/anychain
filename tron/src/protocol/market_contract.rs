// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `core/contract/market_contract.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.MarketSellAssetContract)
pub struct MarketSellAssetContract {
    // message fields
    // @@protoc_insertion_point(field:protocol.MarketSellAssetContract.owner_address)
    pub owner_address: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protocol.MarketSellAssetContract.sell_token_id)
    pub sell_token_id: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protocol.MarketSellAssetContract.sell_token_quantity)
    pub sell_token_quantity: i64,
    // @@protoc_insertion_point(field:protocol.MarketSellAssetContract.buy_token_id)
    pub buy_token_id: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protocol.MarketSellAssetContract.buy_token_quantity)
    pub buy_token_quantity: i64,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.MarketSellAssetContract.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MarketSellAssetContract {
    fn default() -> &'a MarketSellAssetContract {
        <MarketSellAssetContract as ::protobuf::Message>::default_instance()
    }
}

impl MarketSellAssetContract {
    pub fn new() -> MarketSellAssetContract {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "owner_address",
            |m: &MarketSellAssetContract| { &m.owner_address },
            |m: &mut MarketSellAssetContract| { &mut m.owner_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sell_token_id",
            |m: &MarketSellAssetContract| { &m.sell_token_id },
            |m: &mut MarketSellAssetContract| { &mut m.sell_token_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sell_token_quantity",
            |m: &MarketSellAssetContract| { &m.sell_token_quantity },
            |m: &mut MarketSellAssetContract| { &mut m.sell_token_quantity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buy_token_id",
            |m: &MarketSellAssetContract| { &m.buy_token_id },
            |m: &mut MarketSellAssetContract| { &mut m.buy_token_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buy_token_quantity",
            |m: &MarketSellAssetContract| { &m.buy_token_quantity },
            |m: &mut MarketSellAssetContract| { &mut m.buy_token_quantity },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MarketSellAssetContract>(
            "MarketSellAssetContract",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MarketSellAssetContract {
    const NAME: &'static str = "MarketSellAssetContract";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.owner_address = is.read_bytes()?;
                },
                18 => {
                    self.sell_token_id = is.read_bytes()?;
                },
                24 => {
                    self.sell_token_quantity = is.read_int64()?;
                },
                34 => {
                    self.buy_token_id = is.read_bytes()?;
                },
                40 => {
                    self.buy_token_quantity = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.owner_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.owner_address);
        }
        if !self.sell_token_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.sell_token_id);
        }
        if self.sell_token_quantity != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.sell_token_quantity);
        }
        if !self.buy_token_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.buy_token_id);
        }
        if self.buy_token_quantity != 0 {
            my_size += ::protobuf::rt::int64_size(5, self.buy_token_quantity);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.owner_address.is_empty() {
            os.write_bytes(1, &self.owner_address)?;
        }
        if !self.sell_token_id.is_empty() {
            os.write_bytes(2, &self.sell_token_id)?;
        }
        if self.sell_token_quantity != 0 {
            os.write_int64(3, self.sell_token_quantity)?;
        }
        if !self.buy_token_id.is_empty() {
            os.write_bytes(4, &self.buy_token_id)?;
        }
        if self.buy_token_quantity != 0 {
            os.write_int64(5, self.buy_token_quantity)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MarketSellAssetContract {
        MarketSellAssetContract::new()
    }

    fn clear(&mut self) {
        self.owner_address.clear();
        self.sell_token_id.clear();
        self.sell_token_quantity = 0;
        self.buy_token_id.clear();
        self.buy_token_quantity = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MarketSellAssetContract {
        static instance: MarketSellAssetContract = MarketSellAssetContract {
            owner_address: ::std::vec::Vec::new(),
            sell_token_id: ::std::vec::Vec::new(),
            sell_token_quantity: 0,
            buy_token_id: ::std::vec::Vec::new(),
            buy_token_quantity: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MarketSellAssetContract {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MarketSellAssetContract").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MarketSellAssetContract {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MarketSellAssetContract {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.MarketCancelOrderContract)
pub struct MarketCancelOrderContract {
    // message fields
    // @@protoc_insertion_point(field:protocol.MarketCancelOrderContract.owner_address)
    pub owner_address: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protocol.MarketCancelOrderContract.order_id)
    pub order_id: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.MarketCancelOrderContract.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MarketCancelOrderContract {
    fn default() -> &'a MarketCancelOrderContract {
        <MarketCancelOrderContract as ::protobuf::Message>::default_instance()
    }
}

impl MarketCancelOrderContract {
    pub fn new() -> MarketCancelOrderContract {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "owner_address",
            |m: &MarketCancelOrderContract| { &m.owner_address },
            |m: &mut MarketCancelOrderContract| { &mut m.owner_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "order_id",
            |m: &MarketCancelOrderContract| { &m.order_id },
            |m: &mut MarketCancelOrderContract| { &mut m.order_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MarketCancelOrderContract>(
            "MarketCancelOrderContract",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MarketCancelOrderContract {
    const NAME: &'static str = "MarketCancelOrderContract";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.owner_address = is.read_bytes()?;
                },
                18 => {
                    self.order_id = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.owner_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.owner_address);
        }
        if !self.order_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.order_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.owner_address.is_empty() {
            os.write_bytes(1, &self.owner_address)?;
        }
        if !self.order_id.is_empty() {
            os.write_bytes(2, &self.order_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MarketCancelOrderContract {
        MarketCancelOrderContract::new()
    }

    fn clear(&mut self) {
        self.owner_address.clear();
        self.order_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MarketCancelOrderContract {
        static instance: MarketCancelOrderContract = MarketCancelOrderContract {
            owner_address: ::std::vec::Vec::new(),
            order_id: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MarketCancelOrderContract {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MarketCancelOrderContract").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MarketCancelOrderContract {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MarketCancelOrderContract {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#core/contract/market_contract.proto\x12\x08protocol\"\xe2\x01\n\x17Ma\
    rketSellAssetContract\x12#\n\rowner_address\x18\x01\x20\x01(\x0cR\x0cown\
    erAddress\x12\"\n\rsell_token_id\x18\x02\x20\x01(\x0cR\x0bsellTokenId\
    \x12.\n\x13sell_token_quantity\x18\x03\x20\x01(\x03R\x11sellTokenQuantit\
    y\x12\x20\n\x0cbuy_token_id\x18\x04\x20\x01(\x0cR\nbuyTokenId\x12,\n\x12\
    buy_token_quantity\x18\x05\x20\x01(\x03R\x10buyTokenQuantity\"[\n\x19Mar\
    ketCancelOrderContract\x12#\n\rowner_address\x18\x01\x20\x01(\x0cR\x0cow\
    nerAddress\x12\x19\n\x08order_id\x18\x02\x20\x01(\x0cR\x07orderIdBE\n\
    \x18org.tron.protos.contractZ)github.com/tronprotocol/grpc-gateway/coreJ\
    \xc8\x04\n\x06\x12\x04\0\0\x12\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\
    \n\x01\x02\x12\x03\x02\0\x11\n\x08\n\x01\x08\x12\x03\x04\01\nH\n\x02\x08\
    \x01\x12\x03\x04\01\"=Specify\x20the\x20name\x20of\x20the\x20package\x20\
    that\x20generated\x20the\x20Java\x20file\n\n\x08\n\x01\x08\x12\x03\x05\0\
    @\n\t\n\x02\x08\x0b\x12\x03\x05\0@\n\n\n\x02\x04\0\x12\x04\x07\0\r\x01\n\
    \n\n\x03\x04\0\x01\x12\x03\x07\x08\x1f\n\x0b\n\x04\x04\0\x02\0\x12\x03\
    \x08\x04\x1c\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x08\x04\t\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x08\n\x17\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x08\x1a\x1b\n\x0b\n\x04\x04\0\x02\x01\x12\x03\t\x04\x1c\n\x0c\n\x05\x04\
    \0\x02\x01\x05\x12\x03\t\x04\t\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\t\n\
    \x17\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\t\x1a\x1b\n\x0b\n\x04\x04\0\
    \x02\x02\x12\x03\n\x04\"\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\n\x04\t\n\
    \x0c\n\x05\x04\0\x02\x02\x01\x12\x03\n\n\x1d\n\x0c\n\x05\x04\0\x02\x02\
    \x03\x12\x03\n\x20!\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x0b\x04\x1b\n\x0c\
    \n\x05\x04\0\x02\x03\x05\x12\x03\x0b\x04\t\n\x0c\n\x05\x04\0\x02\x03\x01\
    \x12\x03\x0b\n\x16\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x0b\x19\x1a\n\
    \x1d\n\x04\x04\0\x02\x04\x12\x03\x0c\x04!\"\x10\x20min\x20to\x20receive\
    \n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x0c\x04\t\n\x0c\n\x05\x04\0\x02\
    \x04\x01\x12\x03\x0c\n\x1c\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x0c\x1f\
    \x20\n\n\n\x02\x04\x01\x12\x04\x0f\0\x12\x01\n\n\n\x03\x04\x01\x01\x12\
    \x03\x0f\x08!\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x10\x04\x1c\n\x0c\n\x05\
    \x04\x01\x02\0\x05\x12\x03\x10\x04\t\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03\x10\n\x17\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x10\x1a\x1b\n\x0b\n\
    \x04\x04\x01\x02\x01\x12\x03\x11\x04\x17\n\x0c\n\x05\x04\x01\x02\x01\x05\
    \x12\x03\x11\x04\t\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x11\n\x12\n\
    \x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x11\x15\x16b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(MarketSellAssetContract::generated_message_descriptor_data());
            messages.push(MarketCancelOrderContract::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
