// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `core/contract/proposal_contract.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.ProposalApproveContract)
pub struct ProposalApproveContract {
    // message fields
    // @@protoc_insertion_point(field:protocol.ProposalApproveContract.owner_address)
    pub owner_address: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protocol.ProposalApproveContract.proposal_id)
    pub proposal_id: i64,
    // @@protoc_insertion_point(field:protocol.ProposalApproveContract.is_add_approval)
    pub is_add_approval: bool,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.ProposalApproveContract.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProposalApproveContract {
    fn default() -> &'a ProposalApproveContract {
        <ProposalApproveContract as ::protobuf::Message>::default_instance()
    }
}

impl ProposalApproveContract {
    pub fn new() -> ProposalApproveContract {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "owner_address",
            |m: &ProposalApproveContract| { &m.owner_address },
            |m: &mut ProposalApproveContract| { &mut m.owner_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proposal_id",
            |m: &ProposalApproveContract| { &m.proposal_id },
            |m: &mut ProposalApproveContract| { &mut m.proposal_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_add_approval",
            |m: &ProposalApproveContract| { &m.is_add_approval },
            |m: &mut ProposalApproveContract| { &mut m.is_add_approval },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProposalApproveContract>(
            "ProposalApproveContract",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProposalApproveContract {
    const NAME: &'static str = "ProposalApproveContract";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.owner_address = is.read_bytes()?;
                },
                16 => {
                    self.proposal_id = is.read_int64()?;
                },
                24 => {
                    self.is_add_approval = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.owner_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.owner_address);
        }
        if self.proposal_id != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.proposal_id);
        }
        if self.is_add_approval != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.owner_address.is_empty() {
            os.write_bytes(1, &self.owner_address)?;
        }
        if self.proposal_id != 0 {
            os.write_int64(2, self.proposal_id)?;
        }
        if self.is_add_approval != false {
            os.write_bool(3, self.is_add_approval)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProposalApproveContract {
        ProposalApproveContract::new()
    }

    fn clear(&mut self) {
        self.owner_address.clear();
        self.proposal_id = 0;
        self.is_add_approval = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProposalApproveContract {
        static instance: ProposalApproveContract = ProposalApproveContract {
            owner_address: ::std::vec::Vec::new(),
            proposal_id: 0,
            is_add_approval: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProposalApproveContract {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProposalApproveContract").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProposalApproveContract {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProposalApproveContract {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.ProposalCreateContract)
pub struct ProposalCreateContract {
    // message fields
    // @@protoc_insertion_point(field:protocol.ProposalCreateContract.owner_address)
    pub owner_address: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protocol.ProposalCreateContract.parameters)
    pub parameters: ::std::collections::HashMap<i64, i64>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.ProposalCreateContract.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProposalCreateContract {
    fn default() -> &'a ProposalCreateContract {
        <ProposalCreateContract as ::protobuf::Message>::default_instance()
    }
}

impl ProposalCreateContract {
    pub fn new() -> ProposalCreateContract {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "owner_address",
            |m: &ProposalCreateContract| { &m.owner_address },
            |m: &mut ProposalCreateContract| { &mut m.owner_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "parameters",
            |m: &ProposalCreateContract| { &m.parameters },
            |m: &mut ProposalCreateContract| { &mut m.parameters },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProposalCreateContract>(
            "ProposalCreateContract",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProposalCreateContract {
    const NAME: &'static str = "ProposalCreateContract";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.owner_address = is.read_bytes()?;
                },
                18 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_int64()?,
                            16 => value = is.read_int64()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.parameters.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.owner_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.owner_address);
        }
        for (k, v) in &self.parameters {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::int64_size(1, *k);
            entry_size += ::protobuf::rt::int64_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.owner_address.is_empty() {
            os.write_bytes(1, &self.owner_address)?;
        }
        for (k, v) in &self.parameters {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::int64_size(1, *k);
            entry_size += ::protobuf::rt::int64_size(2, *v);
            os.write_raw_varint32(18)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_int64(1, *k)?;
            os.write_int64(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProposalCreateContract {
        ProposalCreateContract::new()
    }

    fn clear(&mut self) {
        self.owner_address.clear();
        self.parameters.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProposalCreateContract {
        static instance: ::protobuf::rt::Lazy<ProposalCreateContract> = ::protobuf::rt::Lazy::new();
        instance.get(ProposalCreateContract::new)
    }
}

impl ::protobuf::MessageFull for ProposalCreateContract {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProposalCreateContract").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProposalCreateContract {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProposalCreateContract {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.ProposalDeleteContract)
pub struct ProposalDeleteContract {
    // message fields
    // @@protoc_insertion_point(field:protocol.ProposalDeleteContract.owner_address)
    pub owner_address: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protocol.ProposalDeleteContract.proposal_id)
    pub proposal_id: i64,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.ProposalDeleteContract.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProposalDeleteContract {
    fn default() -> &'a ProposalDeleteContract {
        <ProposalDeleteContract as ::protobuf::Message>::default_instance()
    }
}

impl ProposalDeleteContract {
    pub fn new() -> ProposalDeleteContract {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "owner_address",
            |m: &ProposalDeleteContract| { &m.owner_address },
            |m: &mut ProposalDeleteContract| { &mut m.owner_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proposal_id",
            |m: &ProposalDeleteContract| { &m.proposal_id },
            |m: &mut ProposalDeleteContract| { &mut m.proposal_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProposalDeleteContract>(
            "ProposalDeleteContract",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProposalDeleteContract {
    const NAME: &'static str = "ProposalDeleteContract";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.owner_address = is.read_bytes()?;
                },
                16 => {
                    self.proposal_id = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.owner_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.owner_address);
        }
        if self.proposal_id != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.proposal_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.owner_address.is_empty() {
            os.write_bytes(1, &self.owner_address)?;
        }
        if self.proposal_id != 0 {
            os.write_int64(2, self.proposal_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProposalDeleteContract {
        ProposalDeleteContract::new()
    }

    fn clear(&mut self) {
        self.owner_address.clear();
        self.proposal_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProposalDeleteContract {
        static instance: ProposalDeleteContract = ProposalDeleteContract {
            owner_address: ::std::vec::Vec::new(),
            proposal_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProposalDeleteContract {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProposalDeleteContract").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProposalDeleteContract {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProposalDeleteContract {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%core/contract/proposal_contract.proto\x12\x08protocol\"\x87\x01\n\x17\
    ProposalApproveContract\x12#\n\rowner_address\x18\x01\x20\x01(\x0cR\x0co\
    wnerAddress\x12\x1f\n\x0bproposal_id\x18\x02\x20\x01(\x03R\nproposalId\
    \x12&\n\x0fis_add_approval\x18\x03\x20\x01(\x08R\risAddApproval\"\xce\
    \x01\n\x16ProposalCreateContract\x12#\n\rowner_address\x18\x01\x20\x01(\
    \x0cR\x0cownerAddress\x12P\n\nparameters\x18\x02\x20\x03(\x0b20.protocol\
    .ProposalCreateContract.ParametersEntryR\nparameters\x1a=\n\x0fParameter\
    sEntry\x12\x10\n\x03key\x18\x01\x20\x01(\x03R\x03key\x12\x14\n\x05value\
    \x18\x02\x20\x01(\x03R\x05value:\x028\x01\"^\n\x16ProposalDeleteContract\
    \x12#\n\rowner_address\x18\x01\x20\x01(\x0cR\x0cownerAddress\x12\x1f\n\
    \x0bproposal_id\x18\x02\x20\x01(\x03R\nproposalIdBE\n\x18org.tron.protos\
    .contractZ)github.com/tronprotocol/grpc-gateway/coreJ\xd7\x05\n\x06\x12\
    \x04\0\0\x16\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\
    \x02\0\x11\n\x08\n\x01\x08\x12\x03\x04\01\nH\n\x02\x08\x01\x12\x03\x04\0\
    1\"=Specify\x20the\x20name\x20of\x20the\x20package\x20that\x20generated\
    \x20the\x20Java\x20file\n\n\x08\n\x01\x08\x12\x03\x06\0@\nx\n\x02\x08\
    \x0b\x12\x03\x06\0@\x1amoption\x20java_outer_classname\x20=\x20\"Proposa\
    lApproveContract\";\x20//Specify\x20the\x20class\x20name\x20of\x20the\
    \x20generated\x20Java\x20file\n\n\n\n\x02\x04\0\x12\x04\x08\0\x0c\x01\n\
    \n\n\x03\x04\0\x01\x12\x03\x08\x08\x1f\n\x0b\n\x04\x04\0\x02\0\x12\x03\t\
    \x02\x1a\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\t\x02\x07\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03\t\x08\x15\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\t\x18\
    \x19\n\x0b\n\x04\x04\0\x02\x01\x12\x03\n\x02\x18\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03\n\x02\x07\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\n\x08\
    \x13\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\n\x16\x17\n%\n\x04\x04\0\x02\
    \x02\x12\x03\x0b\x02\x1b\"\x18\x20add\x20or\x20remove\x20approval\n\n\
    \x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0b\x02\x06\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03\x0b\x07\x16\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0b\
    \x19\x1a\n\n\n\x02\x04\x01\x12\x04\x0e\0\x11\x01\n\n\n\x03\x04\x01\x01\
    \x12\x03\x0e\x08\x1e\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x0f\x02\x1a\n\x0c\
    \n\x05\x04\x01\x02\0\x05\x12\x03\x0f\x02\x07\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03\x0f\x08\x15\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0f\x18\
    \x19\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x10\x02#\n\x0c\n\x05\x04\x01\
    \x02\x01\x06\x12\x03\x10\x02\x13\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\
    \x10\x14\x1e\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x10!\"\n\n\n\x02\
    \x04\x02\x12\x04\x13\0\x16\x01\n\n\n\x03\x04\x02\x01\x12\x03\x13\x08\x1e\
    \n\x0b\n\x04\x04\x02\x02\0\x12\x03\x14\x02\x1a\n\x0c\n\x05\x04\x02\x02\0\
    \x05\x12\x03\x14\x02\x07\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x14\x08\
    \x15\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x14\x18\x19\n\x0b\n\x04\x04\
    \x02\x02\x01\x12\x03\x15\x02\x18\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\
    \x15\x02\x07\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x15\x08\x13\n\x0c\n\
    \x05\x04\x02\x02\x01\x03\x12\x03\x15\x16\x17b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(ProposalApproveContract::generated_message_descriptor_data());
            messages.push(ProposalCreateContract::generated_message_descriptor_data());
            messages.push(ProposalDeleteContract::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
